<?php
/*
 * AUTOGENERATED CODE - DO NOT EDIT!
 *
 * This base class was generated by the Dat0r library and
 * must not be modified manually. Any modifications to this
 * file will be lost upon triggering the next automatic
 * class generation.
 *
 * If you are looking for a place to alter the behaviour of
 * '{{ module_name }}' documents please see the skeleton
 * class '{{ class_name }}'. Modifications to the skeleton
 * file will prevail any subsequent class generation runs.
 *
 * To define new fields or adjust existing fields and their
 * default options modify the schema definition file of
 * the '{{ module_name }}' module.
 *
 * @see https://github.com/berlinonline/Dat0r
 */

namespace {{ namespace }};

use {{ parent_implementor }};

/**
 * Serves as the base class to the '{{ module_name }}' document skeleton.
 *
 * This class contains definitions for fields and their options available
 * on '{{ class_name }}' instances. Modifications to getters and setters
 * as well as new additional helper methods should not be placed in here,
 * but be implemented within the skeleton class '{{ class_name }}'.
 *
 * Fields can have default and null values set via their options. The keys
 * are named 'default_value' and 'null_value' respectively.
 *
 * This class extends the '{{ parent_class_name }}' class to get the change events and
 * validation handling behaviour of that class.
 */
abstract class {{ class_name }} extends {{ parent_class_name }}
{
{%- for field in fields %}

    /**
     * Returns the current value of the '{{ field.name }}' field on this
     * '{{ module_name }}' document. The 'default_value' option set for
     * this field is returned if no value was set. If neither a value nor
     * default value was set the 'null_value' option value is returned.
     *
     * @return {{ field.php_type }} Value or default value of field '{{ field.name }}'. Null value otherwise (defaults to NULL).
     */
    public function {{ field.getter }}()
    {
        return $this->getValue('{{ field.name }}');
    }

    /**
     * Sets the value of the '{{ field.name }}' field on
     * this '{{ module_name }}' document and returns whether
     * this document is still valid after setting the given
     * value on it.
     *
     * @param {{ field.php_type }} ${{ field.name }} {{ field.description|join(' ') }}
     *
     * @return boolean True, if the '{{ module_name }}' document instance is still valid. False otherwise.
     */
    public function {{ field.setter }}(${{ field.name }})
    {
        return $this->setValue('{{ field.name }}', ${{ field.name }});
    }
{% endfor %}
}
